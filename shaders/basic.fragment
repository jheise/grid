#version 140
uniform mat4 model;
uniform sampler2D textureUniform;

struct Light {
    vec3 position;
    vec3 intensities;
};

// constant to determine maximum number of lights to process
#define MAXLIGHTS 10

uniform int numlights;
uniform Light light[MAXLIGHTS];

in vec3 fragPosition;
in vec2 fragUV;
in vec3 fragNormal;

out vec4 finalColor;

void main(){
    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vec3 normal = normalize(normalMatrix * fragNormal);

    vec3 fragLocation = vec3(model * vec4(fragPosition, 1));

    vec4 new_colors = vec4(0);
    for( int i = 0; i < numlights; i++){
        vec3 surfaceToLight = light[i].position - fragLocation;
        float brightness = dot(normal, surfaceToLight) / (length(surfaceToLight) * length(normal));
        brightness = clamp(brightness, 0, 1);
        vec4 temp_colors = vec4(light[0].intensities, 1);
        new_colors += brightness * temp_colors * texture(textureUniform, fragUV);
    }

    finalColor = new_colors;
    finalColor.a = 1;
}
